package pl.tau.s15664.dao;

import pl.tau.s15664.dao.GuitarDao;
import pl.tau.s15664.domain.Guitar;

import java.sql.*;
import java.util.LinkedList;
import java.util.List;

public class GuitarDaoJdbcImpl implements GuitarDao {

    private Connection connection;

    private PreparedStatement addGuitarStmt;
    private PreparedStatement getAllGuitarsStmt;
    private PreparedStatement deleteGuitarStmt;
    private PreparedStatement getGuitarStmt;
    private PreparedStatement updateGuitarStmt;

    public GuitarDaoJdbcImpl(Connection connection) throws SQLException {
        this.connection = connection;
 //      if (!isDatabaseReady()) {
 //        createTables();
 //     }
        setConnection(connection);
    }

    public GuitarDaoJdbcImpl() throws SQLException {
    }

    public void createTables() throws SQLException {
        connection.createStatement()
                    .executeUpdate("CREATE TABLE " +
                            "Guitar(id bigint GENERATED BY DEFAULT AS IDENTITY, "
                            + "manufacturer varchar(32) NOT NULL, " + "model varchar(32) NOT NULL, "
                            + "numberofstrings integer)");
    }

    private boolean isDatabaseReady() {
        try {
            ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
            boolean tableExists = false;
            while (rs.next()) {
                if ("Guitar".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
                    tableExists = true;
                    break;
                }
            }
            return tableExists;
        } catch (SQLException e) {
            return false;
        }
    }

    @Override
    public int addGuitar(Guitar guitar) {
        int count = 0;
        try {
            addGuitarStmt.setString(1, guitar.getManufacturer());
            addGuitarStmt.setString(2, guitar.getModel());
            addGuitarStmt.setInt(3, guitar.getNumberOfStrings());
            count = addGuitarStmt.executeUpdate();
            ResultSet generatedKeys = addGuitarStmt.getGeneratedKeys();
            if (generatedKeys.next()) {
                guitar.setId(generatedKeys.getLong(1));
            }
        } catch (SQLException e) {
            throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
        }
        return count;
    }

    public List<Guitar> getAllGuitars() {
        List<Guitar> guitars = new LinkedList<>();
        try {
            ResultSet rs = getAllGuitarsStmt.executeQuery();

            while (rs.next()) {
                Guitar guitar = new Guitar();
                guitar.setId(rs.getInt("id"));
                guitar.setManufacturer(rs.getString("manufacturer"));
                guitar.setModel(rs.getString("model"));
                guitar.setNumberOfStrings(rs.getInt("numberofstrings"));
                guitars.add(guitar);
            }

        } catch (SQLException e) {
            throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
        }
        return guitars;
    }

    @Override
    public Connection getConnection() {
        return connection;
    }

    public void setConnection(Connection connection) throws SQLException {
        this.connection = connection;
        addGuitarStmt = connection.prepareStatement(
            "INSERT INTO Guitar (manufacturer, model, numberofstrings) VALUES (?, ?, ?)",
                Statement.RETURN_GENERATED_KEYS);
        deleteGuitarStmt = connection.prepareStatement("DELETE FROM Guitar where id = ?");
        getAllGuitarsStmt = connection.prepareStatement("SELECT id, manufacturer, model, numberofstrings FROM Guitar ORDER BY id");
        getGuitarStmt = connection.prepareStatement("SELECT id, manufacturer, model, numberofstrings FROM Guitar WHERE id = ?");
        updateGuitarStmt = connection.prepareStatement("UPDATE Guitar SET manufacturer=?,model=?,numberofstrings=? WHERE id = ?");
    }

    @Override
    public int deleteGuitar(Guitar guitar) throws SQLException {
        try {
            deleteGuitarStmt.setLong(1, guitar.getId());
            return deleteGuitarStmt.executeUpdate();
        } catch (SQLException e) {
            throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
        }
    }

    @Override
    public int updateGuitar(Guitar guitar) throws SQLException {
        int count = 0;
        try {
            updateGuitarStmt.setString(1, guitar.getManufacturer());
            updateGuitarStmt.setString(2, guitar.getModel());
            updateGuitarStmt.setInt(3, guitar.getNumberOfStrings());
            if (guitar.getId() != null) {
                updateGuitarStmt.setLong(4, guitar.getId());
            } else {
                updateGuitarStmt.setLong(4, -1);
            }
            count = updateGuitarStmt.executeUpdate();
        } catch (SQLException e) {
            throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
        }
        if (count <= 0)
            throw new SQLException("Guitar not found for update");
        return count;
    }

    @Override
    public Guitar getGuitar(long id) throws SQLException {
        try {
            getGuitarStmt.setLong(1, id);
            ResultSet rs = getGuitarStmt.executeQuery();

            if (rs.next()) {
                Guitar guitar = new Guitar();
                guitar.setId(rs.getInt("id"));
                guitar.setManufacturer(rs.getString("manufacturer"));
                guitar.setModel(rs.getString("model"));
                guitar.setNumberOfStrings(rs.getInt("numberofstrings"));
                return guitar;
            }

        } catch (SQLException e) {
            throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
        }
        throw new SQLException("Guitar with id " + id + " does not exist");
    }
}